use mathru::algebra::linear::Matrix;

#[test]
fn svd_f32()
{
    let a: Matrix<f32> = matrix![   4.0, 1.0, -2.0, 2.0;
                                    1.0, 2.0, 0.0, -2.0;
                                    0.0, 3.0, -2.0, 2.0;
                                    2.0, 1.0, -2.0, -1.0];

    let (u, s, v): (Matrix<f32>, Matrix<f32>, Matrix<f32>) = a.dec_sv();

    let u_ref: Matrix<f32> = matrix![   0.750618975420566, -0.10396419803551285, -0.5550030946996072, -0.3431241235169467;
                                        0.16660611095451502, 0.7151480228364393, 0.42071909480760994, -0.5327299057590199;
                                        0.49145768126990524, -0.4896500732330627, 0.7174571018374751, 0.06298777918484924;
                                        0.40900232890779536, 0.48784993260512777, -0.014910236788856494, 0.7710364602559809];

    let v_ref: Matrix<f32> = matrix![   0.641413939431974, 0.3770763401833474, -0.5915891468488664, -0.3105219369173845;
                                        0.4773429354587908, 0.10210161763764197, 0.7839592576263352, -0.3835711981175503;
                                        -0.5312275172316614, 0.06255922864595094, -0.09543998328421795, -0.8395087119487312;
                                        0.2802306286004916, -0.9184089700459931, -0.1622386307366823, -0.2273200062245417];

    let s_ref: Matrix<f32> = matrix![   6.216089837372844, 0.0, 0.0, 0.0;
                                        0.0, 3.3812545631600996, 0.0, 0.0;
                                        0.0, 0.0, 3.0918649662716553, 0.0;
                                        0.0, 0.0, 0.0, 1.1694937978293738];

    assert_relative_eq!(u_ref, u, epsilon=1.0e-5);
    assert_relative_eq!(s_ref, s, epsilon=1.0e-5);
    assert_relative_eq!(v_ref, v, epsilon=1.0e-5);
}


#[test]
fn svd_f64()
{
    let a: Matrix<f64> = matrix![   4.0, 1.0, -2.0, 2.0;
                                    1.0, 2.0, 0.0, -2.0;
                                    0.0, 3.0, -2.0, 2.0;
                                    2.0, 1.0, -2.0, -1.0];

    let (u, s, v): (Matrix<f64>, Matrix<f64>, Matrix<f64>) = a.dec_sv();

    let u_ref: Matrix<f64> = matrix![   0.750618975420566, -0.10396419803551285, -0.5550030946996072, -0.3431241235169467;
                                        0.16660611095451502, 0.7151480228364393, 0.42071909480760994, -0.5327299057590199;
                                        0.49145768126990524, -0.4896500732330627, 0.7174571018374751, 0.06298777918484924;
                                        0.40900232890779536, 0.48784993260512777, -0.014910236788856494, 0.7710364602559809];

    let v_ref: Matrix<f64> = matrix![   0.641413939431974, 0.3770763401833474, -0.5915891468488664, -0.3105219369173845;
                                        0.4773429354587908, 0.10210161763764197, 0.7839592576263352, -0.3835711981175503;
                                        -0.5312275172316614, 0.06255922864595094, -0.09543998328421795, -0.8395087119487312;
                                        0.2802306286004916, -0.9184089700459931, -0.1622386307366823, -0.2273200062245417];

    let s_ref: Matrix<f64> = matrix![   6.216089837372844, 0.0, 0.0, 0.0;
                                        0.0, 3.3812545631600996, 0.0, 0.0;
                                        0.0, 0.0, 3.0918649662716553, 0.0;
                                        0.0, 0.0, 0.0, 1.1694937978293738];

    assert_relative_eq!(u_ref, u, epsilon=0.0000001, max_relative=1.0e-10);
    assert_relative_eq!(s_ref, s, epsilon=0.0000001, max_relative=1.0e-10);
    assert_relative_eq!(v_ref, v, epsilon=0.0000001, max_relative=1.0e-10);
}

